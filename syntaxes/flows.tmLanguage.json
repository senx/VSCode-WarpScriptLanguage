{
    "name": "flows",
    "fileTypes": [
        ".flows"
    ],
    "patterns": [
        {
            "include": "#lexems"
        }
    ],
    "repository": {
        "lexems": {
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#comments-inline"
                },
                {
                    "include": "#numbers"
                },
                {
                    "include": "#operator"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#function"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#variables"
                }
            ]
        },
        "keywords": {
            "name": "keyword.control.flow",
            "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(return)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        "strings": {
            "patterns": [
                {
                    "include": "#regex"
                },
                {
                    "include": "#string1"
                },
                {
                    "include": "#string2"
                },
                {
                    "include": "#string3"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment"
                        }
                    },
                    "match": "/\\*\\*/",
                    "name": "comment.block.empty"
                },
                {
                    "include": "text.html.javadoc"
                },
                {
                    "include": "#comments-inline"
                }
            ]
        },
        "comments-inline": {
            "patterns": [
                {
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment"
                        }
                    },
                    "end": "(\\s)*\\*/",
                    "name": "comment.block"
                },
                {
                    "begin": "(^[\\s\\t]+)?(?=//)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading"
                        }
                    },
                    "end": "(?!\\G)",
                    "patterns": [
                        {
                            "begin": "(\\s)*//",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.comment"
                                }
                            },
                            "end": "\\n",
                            "name": "comment.line.double-slash"
                        }
                    ]
                },
                {
                    "begin": "(^[\\s\\t]+)?(?=#)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading"
                        }
                    },
                    "end": "(?!\\G)",
                    "patterns": [
                        {
                            "begin": "(\\s)*#",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.comment"
                                }
                            },
                            "end": "\\n",
                            "name": "comment.line.double-slash"
                        }
                    ]
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "match": "\\S[[:alpha:]+[:alnum:]?](=|\\S)",
                    "name": "entity.name.variable"
                }
            ]
        },
        "function": {
            "name": "entity.name.function",
            "begin": "([a-zA-Z0-9-.>]+)\\(",
            "beginCaptures": {
                "1": {
                    "name": "keyword"
                }
            },
            "end": "\\)",
            "patterns": [
                {
                    "include": "#lexems"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.language.nan",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))NaN(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                },
                {
                    "name": "constant.language.infinity",
                    "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))[+-]Infinity(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
                },
                {
                    "match": "\\b(?<!\\$)(true|false)\\b(?!\\$)",
                    "name": "constant.numeric"
                },
                {
                    "name": "constant.numeric.hex",
                    "match": "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint"
                        }
                    }
                },
                {
                    "name": "constant.numeric.binary",
                    "match": "\\b(?<!\\$)0(?:b|B)[01][01_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint"
                        }
                    }
                },
                {
                    "name": "constant.numeric.octal",
                    "match": "\\b(?<!\\$)0(?:o|O)?[0-7][0-7_]*(n)?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "storage.type.numeric.bigint"
                        }
                    }
                },
                {
                    "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)",
                    "captures": {
                        "0": {
                            "name": "constant.numeric.decimal"
                        },
                        "1": {
                            "name": "meta.delimiter.decimal.period"
                        },
                        "2": {
                            "name": "storage.type.numeric.bigint"
                        },
                        "3": {
                            "name": "meta.delimiter.decimal.period"
                        },
                        "4": {
                            "name": "storage.type.numeric.bigint"
                        },
                        "5": {
                            "name": "meta.delimiter.decimal.period"
                        },
                        "6": {
                            "name": "storage.type.numeric.bigint"
                        },
                        "7": {
                            "name": "storage.type.numeric.bigint"
                        },
                        "8": {
                            "name": "meta.delimiter.decimal.period"
                        },
                        "9": {
                            "name": "storage.type.numeric.bigint"
                        },
                        "10": {
                            "name": "meta.delimiter.decimal.period"
                        },
                        "11": {
                            "name": "storage.type.numeric.bigint"
                        },
                        "12": {
                            "name": "meta.delimiter.decimal.period"
                        },
                        "13": {
                            "name": "storage.type.numeric.bigint"
                        },
                        "14": {
                            "name": "storage.type.numeric.bigint"
                        }
                    }
                }
            ]
        },
        "string1": {
            "name": "string.quoted.double",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\."
                }
            ]
        },
        "string2": {
            "name": "string.quoted.single",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\."
                }
            ]
        },
        "regex": {
            "name": "string.regexp",
            "begin": "((\"|')~)",
            "end": "('|\")"
        },
        "string3": {
            "name": "string.quoted.multi",
            "begin": "^\\s*<'",
            "end": "'>",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\."
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "match": "(?<!\\S)(!=|<|>|~=|<=|==|>=)(?!\\S)",
                    "name": "keyword.operator.comparison"
                },
                {
                    "match": "(?<!\\S)(%|\\*|\\+|-|/|\\*\\*)(?!\\S)",
                    "name": "keyword.operator.arithmetic"
                },
                {
                    "match": "(?<!\\S)(!|\\|\\|)(?!\\S)",
                    "name": "keyword.operator.logical"
                },
                {
                    "match": "(?<!\\S)(&|\\^|\\||>>>|~|<<|>>)(?!\\S)",
                    "name": "keyword.operator.bitwise"
                },
                {
                    "match": "\\[|\\{|\\}|\\(|\\)|\\[|\\]|\\]",
                    "name": "punctuation.definition.bracket"
                }
            ]
        }
    },
    "scopeName": "source.flows"
}