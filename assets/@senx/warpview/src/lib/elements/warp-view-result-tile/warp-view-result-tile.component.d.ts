import { ElementRef, EventEmitter, NgZone, Renderer2 } from '@angular/core';
import { WarpViewComponent } from '../warp-view-component';
import { SizeService } from '../../services/resize.service';
import { Param } from '../../model/param';
import { DataModel } from '../../model/dataModel';
import { ResizedEvent } from 'angular-resize-event';
export declare class WarpViewResultTileComponent extends WarpViewComponent {
    el: ElementRef;
    renderer: Renderer2;
    sizeService: SizeService;
    ngZone: NgZone;
    type: string;
    standalone: boolean;
    pointHover: EventEmitter<any>;
    warpViewChartResize: EventEmitter<any>;
    chartDraw: EventEmitter<any>;
    boundsDidChange: EventEmitter<any>;
    loading: boolean;
    dataModel: DataModel;
    graphs: {
        spectrum: string[];
        chart: string[];
        pie: string[];
        polar: string[];
        radar: string[];
        bar: string[];
        bubble: string[];
        annotation: string[];
        'gts-tree': string[];
        datagrid: string[];
        display: string[];
        drilldown: string[];
        image: string[];
        map: string[];
        gauge: string[];
        plot: string[];
        box: string[];
        line3d: string[];
        globe: string[];
        drops: string[];
    };
    private _type;
    constructor(el: ElementRef, renderer: Renderer2, sizeService: SizeService, ngZone: NgZone);
    protected update(options: Param, refresh: boolean): void;
    protected convert(data: DataModel): Partial<any>[];
    onResized(event: ResizedEvent): void;
    chartDrawn(): void;
}
