import { ElementRef, EventEmitter, NgZone, Renderer2 } from '@angular/core';
import { WarpViewComponent } from '../warp-view-component';
import { Param } from '../../model/param';
import { DataModel } from '../../model/dataModel';
import { SizeService } from '../../services/resize.service';
import { ChartBounds } from '../../model/chartBounds';
export declare class WarpViewAnnotationComponent extends WarpViewComponent {
    el: ElementRef;
    renderer: Renderer2;
    sizeService: SizeService;
    ngZone: NgZone;
    chartContainer: ElementRef;
    hiddenData: number[];
    type: string;
    standalone: boolean;
    pointHover: EventEmitter<any>;
    warpViewChartResize: EventEmitter<any>;
    chartDraw: EventEmitter<any>;
    boundsDidChange: EventEmitter<any>;
    displayExpander: boolean;
    private _type;
    private visibility;
    private expanded;
    private _standalone;
    private trimmed;
    private maxTick;
    private minTick;
    private visibleGtsId;
    private gtsId;
    private dataHashset;
    private lineHeight;
    private chartBounds;
    layout: Partial<any>;
    marginLeft: number;
    handleKeyDown($event: KeyboardEvent): void;
    handleKeyup($event: KeyboardEvent): void;
    constructor(el: ElementRef, renderer: Renderer2, sizeService: SizeService, ngZone: NgZone);
    update(options: Param, refresh: boolean): void;
    updateBounds(min: any, max: any, marginLeft: any): void;
    drawChart(reparseNewData?: boolean): void;
    relayout(data: any): void;
    hover(data: any): void;
    unhover(): void;
    afterPlot(div: any): void;
    private emitNewBounds;
    protected convert(data: DataModel): Partial<any>[];
    toggle(): void;
    setRealBounds(chartBounds: ChartBounds): void;
}
