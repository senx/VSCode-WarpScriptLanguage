import { ElementRef, EventEmitter, NgZone, OnInit, Renderer2 } from '@angular/core';
import { DataModel } from '../../model/dataModel';
import { ChartBounds } from '../../model/chartBounds';
import { WarpViewComponent } from '../warp-view-component';
import { SizeService } from '../../services/resize.service';
import { Subject } from 'rxjs';
export declare class WarpViewChartComponent extends WarpViewComponent implements OnInit {
    el: ElementRef;
    renderer: Renderer2;
    sizeService: SizeService;
    ngZone: NgZone;
    hiddenData: number[];
    type: string;
    standalone: boolean;
    boundsDidChange: EventEmitter<any>;
    pointHover: EventEmitter<any>;
    warpViewChartResize: EventEmitter<any>;
    private _type;
    private visibility;
    private maxTick;
    private minTick;
    private visibleGtsId;
    private gtsId;
    private dataHashset;
    private chartBounds;
    private visibilityStatus;
    private afterBoundsUpdate;
    private marginLeft;
    private maxPlottable;
    parsing: boolean;
    unhighliteCurve: Subject<number[]>;
    highliteCurve: Subject<{
        on: number[];
        off: number[];
    }>;
    layout: Partial<any>;
    private highlighted;
    update(options: any, refresh: any): void;
    constructor(el: ElementRef, renderer: Renderer2, sizeService: SizeService, ngZone: NgZone);
    ngOnInit(): void;
    getTimeClip(): Promise<ChartBounds>;
    resize(newHeight: number): void;
    drawChart(reparseNewData?: boolean): void;
    private emitNewBounds;
    protected convert(data: DataModel): Partial<any>[];
    afterPlot(plotlyInstance: any): void;
    relayout(data: any): void;
    sliderChange($event: any): void;
    updateBounds(min: any, max: any): void;
    setRealBounds(chartBounds: ChartBounds): void;
    hover(data: any): void;
    unhover(data: any): void;
}
