import { Param } from '../model/param';
import { Logger } from '../utils/logger';
import { DataModel } from '../model/dataModel';
import { GTS } from '../model/GTS';
import { ElementRef, EventEmitter, NgZone, Renderer2 } from '@angular/core';
import { SizeService } from '../services/resize.service';
import { PlotlyComponent } from '../plotly/plotly.component';
import { Config } from 'plotly.js';
export declare type VisibilityState = 'unknown' | 'nothingPlottable' | 'plottablesAllHidden' | 'plottableShown';
export declare abstract class WarpViewComponent {
    el: ElementRef;
    renderer: Renderer2;
    sizeService: SizeService;
    ngZone: NgZone;
    toolTip: ElementRef;
    graph: PlotlyComponent;
    chartContainer: ElementRef;
    width: number;
    height: number;
    hiddenData: number[];
    unit: string;
    debug: boolean | string;
    showLegend: boolean | string;
    responsive: boolean | string;
    options: Param | string;
    data: DataModel | GTS[] | string;
    chartDraw: EventEmitter<any>;
    _options: Param;
    protected LOG: Logger;
    protected defOptions: Param;
    protected _debug: boolean;
    protected _showLegend: boolean;
    protected _responsive: boolean;
    protected _unit: string;
    protected _data: DataModel;
    protected _autoResize: boolean;
    protected _hiddenData: number[];
    protected divider: number;
    tooltipPosition: any;
    loading: boolean;
    noData: boolean;
    layout: Partial<any>;
    plotlyConfig: Partial<Config>;
    plotlyData: Partial<any>[];
    private hideTooltipTimer;
    private rect;
    protected constructor(el: ElementRef, renderer: Renderer2, sizeService: SizeService, ngZone: NgZone);
    protected abstract update(options: Param, refresh: boolean): void;
    protected abstract convert(data: DataModel): Partial<any>[];
    protected legendFormatter(x: any, series: any, highlighted?: number): string;
    protected initChart(el: ElementRef): boolean;
    afterPlot(plotlyInstance?: any): void;
    hideTooltip(): void;
    unhover(data?: any, point?: any): void;
    hover(data: any, point?: any): void;
    getTooltipPosition(): {
        top: any;
        left: any;
    };
    private moveTooltip;
    relayout($event: any): void;
    protected getLabelColor(el: HTMLElement): string;
    protected getGridColor(el: HTMLElement): string;
    protected getCSSColor(el: HTMLElement, property: string, defColor: string): string;
}
