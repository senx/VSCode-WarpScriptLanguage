import { ElementRef, EventEmitter, OnInit, Renderer2 } from '@angular/core';
import { Param } from '../../model/param';
import 'leaflet.heat';
import 'leaflet.markercluster';
import { SizeService } from '../../services/resize.service';
/**
 *
 */
export declare class WarpViewMapComponent implements OnInit {
    el: ElementRef;
    sizeService: SizeService;
    private renderer;
    mapDiv: ElementRef<HTMLDivElement>;
    wrapper: ElementRef<HTMLDivElement>;
    timeSlider: ElementRef<HTMLDivElement>;
    timeRangeSlider: ElementRef<HTMLDivElement>;
    heatData: any[];
    responsive: boolean;
    showLegend: boolean;
    width: number;
    height: number;
    private bounds;
    debug: boolean;
    options: Param;
    data: any;
    hiddenData: number[];
    change: EventEmitter<any>;
    chartDraw: EventEmitter<any>;
    currentZoom: number;
    currentLat: number;
    currentLong: number;
    minTimeValue: number;
    maxTimeValue: number;
    divider: number;
    lowerTimeBound: number;
    upperTimeBound: number;
    timeSpan: number;
    _options: Param;
    private _firstDraw;
    private LOG;
    private _data;
    private _debug;
    private defOptions;
    private _map;
    private _hiddenData;
    private currentValuesMarkers;
    private annotationsMarkers;
    private positionArraysMarkers;
    private _iconAnchor;
    private _popupAnchor;
    private _heatLayer;
    private pathData;
    private annotationsData;
    private positionData;
    private geoJson;
    private timeStart;
    private timeEnd;
    private firstDraw;
    private finalHeight;
    private pathDataLayer;
    private annotationsDataLayer;
    private positionDataLayer;
    private tileLayerGroup;
    private geoJsonLayer;
    private tilesLayer;
    constructor(el: ElementRef, sizeService: SizeService, renderer: Renderer2);
    ngOnInit(): void;
    resizeMe(): void;
    heatRadiusDidChange(event: any): void;
    heatBlurDidChange(event: any): void;
    heatOpacityDidChange(event: any): void;
    private drawMap;
    private icon;
    private patchMapTileGapBug;
    private displayMap;
    updateAnnotation(gts: any): any[];
    private updateGtsPath;
    private addPopup;
    private updatePositionArray;
    resize(): Promise<boolean>;
    onRangeSliderChange(event: any): void;
    onRangeSliderWindowChange(event: any): void;
    onSliderChange(event: any): void;
    updateTimeSpan(event: any): void;
}
