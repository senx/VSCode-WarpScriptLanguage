import { DoCheck, ElementRef, EventEmitter, IterableDiffer, IterableDiffers, KeyValueDiffer, KeyValueDiffers, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Config, Data, Layout, PlotlyHTMLElement } from 'plotly.js';
import { Logger } from '../utils/logger';
export interface Figure {
    data: Data[];
    layout: Partial<Layout>;
    frames: Partial<Config>;
}
export declare class PlotlyComponent implements OnInit, OnChanges, OnDestroy, DoCheck {
    iterableDiffers: IterableDiffers;
    el: ElementRef;
    keyValueDiffers: KeyValueDiffers;
    protected defaultClassName: string;
    protected LOG: Logger;
    plotlyInstance: PlotlyHTMLElement;
    resizeHandler?: (instance: PlotlyHTMLElement) => void;
    layoutDiffer: KeyValueDiffer<string, any>;
    dataDiffer: IterableDiffer<Partial<any>>;
    plotEl: ElementRef;
    data?: Partial<any>[];
    layout?: Partial<any>;
    config?: Partial<Config>;
    frames?: Partial<any>[];
    style?: {
        [key: string]: string;
    };
    divId?: string;
    revision: number;
    className?: string | string[];
    debug: boolean;
    useResizeHandler: boolean;
    updateOnLayoutChange: boolean;
    updateOnDataChange: boolean;
    updateOnlyWithRevision: boolean;
    initialized: EventEmitter<PlotlyHTMLElement>;
    update: EventEmitter<Figure>;
    purge: EventEmitter<Figure>;
    error: EventEmitter<Error>;
    afterExport: EventEmitter<any>;
    afterPlot: EventEmitter<any>;
    animated: EventEmitter<any>;
    animatingFrame: EventEmitter<any>;
    animationInterrupted: EventEmitter<any>;
    autoSize: EventEmitter<any>;
    beforeExport: EventEmitter<any>;
    buttonClicked: EventEmitter<any>;
    click: EventEmitter<any>;
    plotly_click: EventEmitter<any>;
    clickAnnotation: EventEmitter<any>;
    deselect: EventEmitter<any>;
    doubleClick: EventEmitter<any>;
    framework: EventEmitter<any>;
    hover: EventEmitter<any>;
    legendClick: EventEmitter<any>;
    legendDoubleClick: EventEmitter<any>;
    relayout: EventEmitter<any>;
    restyle: EventEmitter<any>;
    redraw: EventEmitter<any>;
    selected: EventEmitter<any>;
    selecting: EventEmitter<any>;
    sliderChange: EventEmitter<any>;
    sliderEnd: EventEmitter<any>;
    sliderStart: EventEmitter<any>;
    transitioning: EventEmitter<any>;
    transitionInterrupted: EventEmitter<any>;
    unhover: EventEmitter<any>;
    relayouting: EventEmitter<any>;
    eventNames: string[];
    rect: any;
    constructor(iterableDiffers: IterableDiffers, el: ElementRef, keyValueDiffers: KeyValueDiffers);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): boolean;
    getWindow(): any;
    getBoundingClientRect(): any;
    getClassName(): string;
    restyleChart(properties: any, curves: any[]): void;
    createPlot(): Promise<void>;
    createFigure(): Figure;
    updatePlot(): void;
    updateWindowResizeHandler(): void;
    dataDifferTrackBy(_: number, item: any): any;
    remove(div: PlotlyHTMLElement): void;
}
